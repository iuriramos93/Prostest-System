version: '3.8'

# Arquivo docker-compose.yml unificado para o Prostest-System
# Este arquivo gerencia os serviços para ambientes de desenvolvimento e produção,
# utilizando variáveis de ambiente definidas em arquivos .env apropriados.

services:
  # Serviço do Banco de Dados PostgreSQL
  db:
    image: postgres:13-alpine
    container_name: protestsystem-db
    restart: always
    env_file:
      - .env # Carrega variáveis de .env (ou .env.prod em produção)
    ports:
      - "${POSTGRES_PORT:-5432}:5432" # Permite configurar a porta do host via .env
    volumes:
      - pgdata:/var/lib/postgresql/data
      # Descomentado e corrigido o caminho para os scripts SQL de inicialização
      - ./sql_scripts:/docker-entrypoint-initdb.d
    networks:
      - protestsystem-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres} -d ${POSTGRES_DB:-protest_system}"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Serviço da API Backend (Flask)
  api:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: protestsystem-api
    restart: always
    env_file:
      - .env # Carrega variáveis de .env (ou .env.prod em produção)
    depends_on:
      db:
        condition: service_healthy
    ports:
      - "${API_PORT:-5000}:5000"
    volumes:
      # Em desenvolvimento, montamos o código para hot-reloading.
      - ./backend:/app
    networks:
      - protestsystem-network
    # HEALTHCHECK já está definido no backend/Dockerfile

  # Serviço do Frontend (React/Vite)
  frontend:
    build:
      context: ./frontend # Contexto agora é a pasta frontend
      dockerfile: Dockerfile
      target: development # Especifica o target stage para desenvolvimento
    container_name: protestsystem-frontend
    restart: always
    env_file:
      - .env # Carrega variáveis de .env
    ports:
      - "${FRONTEND_PORT:-5173}:5173" # Porta do Vite dev server
    volumes:
      - ./frontend:/app # Montar código fonte para hot-reloading
      - /app/node_modules # Isolar node_modules
    depends_on:
      - api
    networks:
      - protestsystem-network

  # Serviço do PGAdmin (Opcional, principalmente para desenvolvimento/gerenciamento)
  pgadmin:
    image: dpage/pgadmin4
    container_name: protestsystem-pgadmin
    restart: always
    env_file:
      - .env # Carrega variáveis de .env
    ports:
      - "${PGADMIN_PORT:-5050}:80"
    volumes:
      - pgadmin-data:/var/lib/pgadmin
    depends_on:
      - db
    networks:
      - protestsystem-network

volumes:
  pgdata: # Volume nomeado para persistência dos dados do PostgreSQL
  pgadmin-data: # Volume nomeado para persistência dos dados do PGAdmin

networks:
  protestsystem-network:
    driver: bridge

